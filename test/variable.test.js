/**
 * Tests for checking correct operation of the Variable class
 */
import test from 'ava';
import Variable from '../src/variable.js';
import { VariableValueError } from '../src/exceptions.js';

const testDomain = ['a', 'b', 'd'];

// Check that we get an error if we try to create a Variable without a name
test('name must be provided', t => {
    const err = t.throws(() => {
        const v = new Variable(undefined, ['a']);
    }, TypeError);
    t.is(err.message, 'Name and domain are required parameters.');
});

// Check that we get an error if we create a Variable with an empty name
test('name cannot be empty string', t => {
    const err = t.throws(() => {
        const v = new Variable('', ['a']);
    }, TypeError);
    t.is(err.message, 'Name cannot be an empty string.');
});

// Check that we get an error if we try to create a Variable without a domain
test('domain must be provided', t => {
    const err = t.throws(() => {
        const v = new Variable('MyVar');
    }, TypeError);
    t.is(err.message, 'Name and domain are required parameters.');
});

// Check for error if we try to create a Variable with a non-array domain
test('domain must be array', t => {
    const err = t.throws(() => {
        const v = new Variable('MyVar', '');
    }, TypeError);
    t.is(err.message, 'Domain must be an array of possible values.');
});

// Check that we get an error if we create a Variable without an empty domain
test('domain cannot be empty array', t => {
    const err = t.throws(() => {
        const v = new Variable('MyVar', []);
    }, TypeError);
    t.is(err.message, 'Domain array cannot be empty.');
});

// Check that an id is autogenerated when we don't specify one
test('id is autogenerated uuid', t => {
    const v = new Variable('MyVar', ['a','b'], null, null);
    const uuidv1Regex = /^[0-9A-F]{8}-[0-9A-F]{4}-[1][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i;
    t.regex(v.getId(), uuidv1Regex);
});

// Check that a specified id is used and not replaced with autogenerated id
test('specified id set correctly', t => {
    const v = new Variable('MyVar', ['a','b'], null, 'MyVarID');
    t.is(v.getId(), 'MyVarID');
});

// Check that trying to set a value that is not in the domain when creating
// a variable triggers an error.
test('create a variable with a value that is not in the domain', t => {
    const err = t.throws(() => {
        const v = new Variable('MyVar', ['a','b'], 'notindomain', 'MyVarID');    
    }, VariableValueError);
    t.is(err.message, 'The specified value is not in the provided domain ' + 
            'of values.');
});


// Check that the getters for a populated variable object work.
test('test variable object getters', t => {
    const v = new Variable('MyVar', testDomain, 'd', 'MyVarID');
    t.is(v.getName(), 'MyVar');
    t.is(v.getValue(), 'd');
    t.is(v.getId(), 'MyVarID');
    
    const domain = v.getDomain();
    t.is(domain.constructor, Array);
    for(let i = 0; i < domain.length; i++) {
        t.is(domain[i], testDomain[i]);
    }
});

// Check that setting variable to a value that is in the domain succeeds
test('set variable to valid value', t => {
    const v = new Variable('MyVar', testDomain, null, 'MyVarID');
    v.setValue('b');
    t.is(v.getValue(), 'b');
});

// Check that setting variable to a value that is NOT in the domain fails
test('set variable to invalid value', t => {
    const v = new Variable('MyVar', testDomain, null, 'MyVarID');
    const result = t.throws(() => {
        v.setValue('j');
    }, VariableValueError);
    t.is(result.message, 'The value specified for variable [MyVarID] is ' + 
            'not in the value domain.');
});

// Check that the valueInDomain call returns true for a domain value.
test('check true for value in domain', t => {
    const v = new Variable('MyVar', testDomain, null, 'MyVarID');
    t.true(v.valueInDomain('b'));
});

// Check that valueInDomain returns false for a value not in the domain.
test('check false for value not in domain', t => {
    const v = new Variable('MyVar', testDomain, null, 'MyVarID');
    t.false(v.valueInDomain('c'));
});

// Test creation of a new Variable object from an existing one - check that 
// we get an object with the same ID but that its actually a different object
test('create a new variable from an existing one', t => {
    const v = new Variable('MyVar', testDomain, null, 'MyVarID');
    const v2 = Variable.fromVariable(v);
    t.not(v, v2);
    t.is(v.getId(), v2.getId());
    t.is(v.getName(), v2.getName());
    t.is(v.getDomain(), v2.getDomain());
    t.is(v.getValue(), v2.getValue());
});